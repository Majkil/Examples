using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration.Conventions;
using System.ComponentModel.DataAnnotations;
using System.Linq;


using System.Text;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations.Schema;

namespace Example13
{
    class Program
    {
        
        static void Main()
        {
            Console.WriteLine("Hello");
            RunExample();
            Console.ReadKey();

         
        }

        public static void RunExample()
        {
            //select all records in database


            // ### Add a db record

            ContactContext c = new ContactContext();

            
                c.Configuration.ValidateOnSaveEnabled = false;

                Contact myC = new Contact
                {
                    FirstName = "dsdf",
                    SecondName = "Said",
                    TelNumber = "1234",
                };

                Address myAddress = new Address
                {
                    address1 = "ABC",
                    address2 = "DEF",
                    
                };


            c.myContact.Add(myC);

            myC.addresses.Add(myAddress);


            
            //c.myAddresses.Add(myAddress);



            //    myContact.addresses.Add(myAddress);


                c.myContact.Add(myC);
                  
                c.SaveChanges();



            






                //selecting top 2 using Take keyword
                var contacts = (from a in c.myContact
                              // where a.FirstName.StartsWith("G")
                               orderby a.Id
                               select a).Take(2);

                

               // Contact myC = contacts.ToList<Contact>().Find(c => c.Id == 5);

               // Console.WriteLine("Test " + myC.Id + " " + myC.FirstName);

                foreach (var con in contacts)
                {
                    Console.WriteLine(con.Id + " " + con.FirstName + " " + con.SecondName + " " + con.TelNumber);

                    foreach (Address a in con.addresses)
                    {
                        Console.WriteLine(a.address1 + " " + a.address2);
                    }

                    /*
                    if (c.Id==4)
                    {
                        context.myContact.Remove(c);
                    }*/
                }
                c.SaveChanges();
            

        


         
            
            
                contacts = from a in c.myContact
                                   // where a.FirstName.StartsWith("G")
                               orderby a.FirstName
                               select a;

                foreach (var con in contacts)
                {
                    con.FirstName = con.FirstName + " Updated";
                }
                
                c.SaveChanges();
            }


        }


    }

    [Table("Contact")]
    public class Contact
    {
        [Column("id")]
        [Key]
        public long? Id { get; set; }

        
        public string FirstName { get; set; }
        public string SecondName { get; set; }
        public string TelNumber { get; set; }

        
        public Contact()
        {
            addresses = new HashSet<Address>();
        }

    public ICollection<Address> addresses { get; set; }


    }

    [Table("ContactAddress")]
    public class Address
    {

        [Column("addressid")]
        [Key]
        public long? Id { get; set; }
        
        

        public string address1 { get; set; }
        public string address2 { get; set; }

        public long? contactid { get; set; }

    [ForeignKey("contactid")]
    public virtual Contact Contact { get; set; }


    }

    class ContactContext : DbContext
    {
        public DbSet<Contact> myContact { get; set; }
        public DbSet<Address> myAddresses { get; set; }
        
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            
            modelBuilder.Conventions
                .Remove<PluralizingTableNameConvention>();

            //the id value is generated by the database on a new entry
            modelBuilder.Entity<Contact>()
        .Property(c => c.Id)
        .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

            //the id value is generated by the database on a new entry
            modelBuilder.Entity<Address>()
        .Property(a => a.Id)
        .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

        }


    }

   
    


